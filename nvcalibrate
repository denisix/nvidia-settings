#!/usr/bin/perl
use POSIX;

my $nvspeedup = '/usr/local/sbin/nvspeedup';
my $file = '/etc/nvcalibrate.cfg';
my $log = '/var/log/nvcalibrate.log';
my $sleep = 3600 * 6; # 3 hrs
my $sleep_check_interval = 300; # sec
my $step = 100;
my $min = 500;
my $max = 2000;
my $nrpe = '/etc/nagios/nrpe.cfg';

# ==========================================================================
# PARSE NRPE
my $cmd_check;
open NR, "<$nrpe";
while(<NR>) {
	if (/^command\[check_miner\]\=(.+)/) {
		$cmd_check = $1;
	}
}
close NR;

# LOG
sub _log {
	my $data = shift;
	open L, ">>$log";
	$time = strftime "%F %T", localtime;
	print L "$time: $data\n";
	close L;
}

# LIST GPU
my %t;
my $gpu_cnt = 0;
open IO, "lspci -n -d 10de:1c03|";
while(<IO>) {
	if (/\d+\:\d+\.\d+/) { $gpu_cnt++ }
}
close IO;
_log("started, found $gpu_cnt GPUs");

# INIT ARRAY
foreach $i (0 .. $gpu_cnt) {
	#print "- gpu$i\n";
	$t[$i][0] = $step;
	$t[$i][1] = $min;
	$t[$i][2] = $max;
}

# LOAD PREV VALUES
if (-e $file) {
	$i = 0;
	$flag = 0;
	_log("loading prev values..\ngpu\tstep\tmin\tmax\n");
	open F, "<$file";
	while(<F>) {
		if (/(\d+)\;(\d+)\;(\d+)/) {
			($t[$i][0], $t[$i][1], $t[$i][2]) = ($1, $2, $3);
			if ($1 > 3 && $2 ne $3 && $flag eq 0) {
				$t[$i][0] = int ($t[$i][0] / 2);
				$flag = 1;
			}
			_log(sprintf "gpu%d\t%d\t%d\t%d", $i, $t[$i][0], $t[$i][1], $t[$i][2]);
			$i++;
		}
	}
	close F;
	_log(".");
}

sub check {
	$ret = 'OK';
	$try = 5;
	$gpu_last_idx = $gpu_cnt - 1;
	do {
		sleep 5 if $try < 5;
		open IO, "$cmd_check|";
		$raw = <IO>;
		close IO;
	} while ($try-->0 && ($raw !~ /^OK/ || $raw !~ /gpu$gpu_last_idx/));

	$ret = ($raw =~ /^OK/ && $raw =~ /gpu$gpu_last_idx/)?'OK':'ERR';
	return $ret;
}

sub commit {
	open F, ">$file";
	_log("commiting:");
	foreach $i (0 .. $gpu_cnt) {
		_log(sprintf "gpu%d: step=%d min=%d max=%d", $i, $t[$i][0], $t[$i][1], $t[$i][2]);
		printf F "%d;%d;%d\n", $t[$i][0], $t[$i][1], $t[$i][2];
	}
	close F;
	system('sync');
	_log(".");
}

sub step {
	_log("step");
	foreach $i (0 .. $gpu_cnt) {
		if ($t[$i][0] <= 3 || $t[$i][1] >= $t[$i][2] + 6) {
#			$t[$i+1][0] = $step if $i < $gpu_cnt;
		} elsif ($t[$i][1] < $t[$i][2]) {
			$t[$i][1] += $t[$i][0];
			return;
		}
	}
}

sub back {
	_log("back");
	for($i = $gpu_cnt; $i>=0; $i--) {
		if ($t[$i][0] ne $step && $t[$i][1] > $min) {
			$t[$i][1] -= $t[$i][0];
			return;
		}
	}

	# if all minimized, force minimize to minimum else:
	for($i = $gpu_cnt; $i>=0; $i--) {
		if ($t[$i][1] > $min) {
			$t[$i][1] -= $t[$i][0];
			return;
		}
	}


}

sub disp {
	_log('disp');
	for($i = $gpu_cnt; $i>=0; $i--) {
		_log("_disp $i:". $t[$i][0] .' _ '. $t[$i][1] .' _ '. $t[$i][2]);
	}
}

sub nvspeedup {
	my $args = '';
	foreach $i (0 .. $gpu_cnt) {
		$args .= $t[$i][1] ." 0 ";
	}
	$ENV{'DISPLAY'} = ':0';
	$cmd = "$nvspeedup $args";
	_log("executing nvspeedup: $cmd");
	open IO, "$cmd|";
	$raw = join '', <IO>;
	close IO;
	_log("out: $raw");
}

sub daemonize {
	chdir '/' or die "Can't chdir to /: $!";
	open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
	open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
	defined(my $pid = fork) or die "Can't fork: $!";
	exit if $pid;
	setsid or die "Can't start a new session: $!";
	open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
	_log('daemonized');
}

_log("calibration started.");
daemonize();

my $sleep_cnt = int ($sleep / $sleep_check_interval);

back(); # -1 step at start

while (1) {
	nvspeedup();
	_log("sleeping total=$sleep sec, check interval=$sleep_check_interval sec, cnt = $sleep_cnt");

	for $sleep_i (1 .. $sleep_cnt) {
		sleep $sleep_check_interval;
		_log("- check miner via API [sleep_i=$sleep_i of $sleep_cnt]");
		if (check() eq 'OK') {
			_log("OK, sleeping next");
		} else {
			_log("FAIL! rebooting..");
			system('/usr/local/sbin/r');
		}
	}

	_log("sleep done, checking miner via API");
	if (check() eq 'OK') {
		_log("OK, commiting..");
		commit();
	} else {
		_log("FAIL! rebooting..");
		system('/usr/local/sbin/r');
	}

	step();
}
